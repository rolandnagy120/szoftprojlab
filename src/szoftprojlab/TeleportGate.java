package szoftprojlab;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TeleportGate.java
//  @ Date : 10/03/2021
//  @ Author : 
//
//


import szoftprojlab.resource.*;

import java.util.List;

public class TeleportGate implements Steppable {
    private int idx;
    private TeleportGate pair;
    private Asteroid asteroid;
    private static Blueprint teleportgateBlueprint = new Blueprint(new Iron(), new Iron(), new Ice(), new Uranium());
    private static int id = 0;
    private boolean isMoving = false;

    public TeleportGate() {
        idx = id++;
    }

    public static void resetId() {
        id = 0;
    }

    /**
     * Gets the asteroid which holds the pair of this gate
     *
     * @return
     */
    public Asteroid GetPairAsteroid() {
        return pair.asteroid;
    }

    /**
     * Places the gate on the given asteroid
     *
     * @param asteroid - the asteroid that will hold the gate
     */
    public void Place(Asteroid asteroid) {
        this.asteroid = asteroid;
    }

    /**
     * Removes the gate from its current asteroid
     */
    public void RemoveFromAsteroid() {
        this.asteroid = null;
    }

    /**
     * Sets the pair of the asteroid, so they are linked
     *
     * @param gate - the gate that will be the pair
     */
    public void SetPair(TeleportGate gate) {
        pair = gate;
        if (!gate.HasPair())
            gate.SetPair(this);
    }

    /**
     * Returns if the gate has a pair
     * Only for unit testing
     *
     * @return
     */
    public Boolean HasPair() {
        return pair != null;
    }

    /**
     * Specifies if the gate can be crafted
     *
     * @param rs - list of resources, should be the inventory of a player
     * @return - the given inventory minus the needed resources for crafting. If its size doesn't change,
     * then the gate cannot be crafted
     */
    public static List<Resource> CanCraft(List<Resource> rs) {
        List<Resource> list = teleportgateBlueprint.IsCraftable(rs);
        return list;
    }

    /**
     * Gets the id of the gate
     * @return  gate id
     */
    public int GetId() {
        return idx;
    }

    /**
     * Gets the id of the pair gate
     * @return  pair gate id
     */
    public int GetPairId() {
        if (pair == null)
            return -1;
        return pair.GetId();
    }

    public void StartMoving() {
        this.isMoving = true;
    }

    public void Explode() {
        //asteroid.RemoveTeleportGate(this);
        GetPairAsteroid().RemoveTeleportGate(pair);
        Main.println("TeleportGate "+ idx+" exploded.");
        Main.println("TeleportGate "+ pair.idx+" exploded.");
    }

    @Override
    public void Step() {
        if (!isMoving) {
            return;
        }

        Asteroid newAsteroid = asteroid.GetRandomNeighbor();
        asteroid.RemoveTeleportGate(this);
        newAsteroid.PlaceTeleportGate(this);
        asteroid = newAsteroid;
        Main.println("Gate " + idx + " Moved to another asteroid");
    }

    public String toString() {
        return "\tgate " + idx + " connected to gate " + pair.idx + "\n";
    }

    public void draw(View view) {
        view.drawTeleportGate();
    }
}
