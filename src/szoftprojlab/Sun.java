package szoftprojlab;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Sun.java
//  @ Date : 10/03/2021
//  @ Author : 
//
//


import szoftprojlab.skeleton.ObjectHolder;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Sun implements Steppable {
	private static Sun singleClassIntance = null;

	private int counter;
	private int cycle;
	private double sunStormProbability;
	private int nextSunStormIn;
	private List<Asteroid> asteroids = new ArrayList<>();

	/**
	 * Initialize the sun
	 * @param nearSunCycle
	 * @param _sunStormProbability
	 */
	public void Init(int nearSunCycle, double _sunStormProbability) {
		cycle = nearSunCycle;
		sunStormProbability = _sunStormProbability;
		nextSunStormIn = (int) (1 / sunStormProbability);
	}

	/**
	 * Clear the asteroids
	 * Only needed for the skeleton
	 */
	public void ClearAsteroids() {
		asteroids.clear();
	}

	/**
	 * Steps the sun
	 * Calls ChangeNearSun if it is the time for it
	 * Calls sunstorm if it is time for it
	 */
	public void Step() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".Step()");

		System.out.print("Do you want to call ChangeNearSun()? (Y|N) ");
		Scanner scanner = new Scanner(System.in);
		String input = scanner.next();

		if (input.equalsIgnoreCase("Y")) {
			ChangeNearSun();
		}


		System.out.print("Do you want to call SunStorm()? (Y|N) ");
		input = scanner.next();

		if (input.equalsIgnoreCase("Y")) {
			SunStorm();
		}

		System.out.println("return from "+objectName+".Step()");
	}

	/**
	 * Sends a sunstorm to the asteroids
	 * Calls SunStorm on every asteroid
	 */
	private void SunStorm() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".SunStorm()");

		asteroids.forEach(Asteroid::SunStorm);

		System.out.println("return from "+objectName+".SunStorm()");
	}

	/**
	 * Changes the near sun state
	 */
	private void ChangeNearSun() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".ChangeNearSun()");
		asteroids.forEach(Asteroid::ChangeNearSun);
		System.out.println("return from "+objectName+".ChangeNearSun()");
	}

	/**
	 * Adds a new asteroid to the field
	 * @param asteroid - the asteroid that joins the field
	 */
	public void AddAsteroid(Asteroid asteroid) {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".AddAsteroid()");

		if (!asteroids.contains(asteroid))
			asteroids.add(asteroid);

		System.out.println("return from "+objectName+".AddAsteroid()");
	}

	public static Sun getInstance() {
		if (singleClassIntance == null) {
			System.out.println("Sun - create");
			singleClassIntance = new Sun();
			System.out.println("return from Sun - create");
		}

		return singleClassIntance;
	}
}
