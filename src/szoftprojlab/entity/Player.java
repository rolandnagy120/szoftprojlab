package szoftprojlab.entity;

//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Player.java
//  @ Date : 10/03/2021
//  @ Author : 
//
//


import szoftprojlab.Game;
import szoftprojlab.TeleportGate;
import szoftprojlab.Timer;
import szoftprojlab.resource.Resource;

import java.util.ArrayList;
import java.util.List;

public class Player extends Entity {
	private List<TeleportGate> gates = new ArrayList<>();
	private List<Resource> inventory = new ArrayList<>();

	public Player() {
	}

	/**
	 * Gets the resources stored in the player inventory
	 * @return
	 */
	@Override
	public List<Resource> GetInventory() {
		return inventory;
	}

	/**
	 * Player steps
	 */
	public void Step() {
	}

	/**
	 * The player mines the asteroid its on currently
	 */
	public void Mine() {
		asteroid.Mine(this);
	}

	/**
	 * The player places back a resource to the asteroid its on
	 * the asteroid should be emptyto receive the resource
	 * @param resource
	 */
	public void PlaceResource(Resource resource) {
		if (inventory.contains(resource))
			asteroid.Place(resource);
	}

	/**
	 * The players places a teleport gate on the current asteroid
	 */
	public void PlaceGate() {
		if (asteroid != null && gates.size() > 0) {
			asteroid.PlaceTeleportGate(gates.get(0));
			gates.remove(0);
		}
	}

	/**
	 * The player crafts a pair of teleport gates from
	 * the resources stored in its iventory
	 */
	public void MakeGates() {
		List<Resource> inventoryAfterCrafting = TeleportGate.CanCraft(this.inventory);

		if (inventoryAfterCrafting != null || inventory.size() == 4) {
			TeleportGate tg1 = new TeleportGate(1);
			TeleportGate tg2 = new TeleportGate(2);
			tg1.SetPair(tg2);
			gates.add(tg1);
			gates.add(tg2);
		}
	}

	/**
	 * The player crafts a robot, and places it on the current asteroid
	 */
	public void MakeAndPlaceRobot() {
		List<Resource> inventoryAfterCrafting = Robot.CanCraft(this.inventory);

		if (inventoryAfterCrafting != null) {
			Robot r = new Robot();
			asteroid.Accept(r);
			inventory = inventoryAfterCrafting;
		}
	}

	/**
	 * Get the teleport gates the player has
	 * Only use for unit tests
	 * @return
	 */
	public List<TeleportGate> GetTeleportGates() {
		return gates;
	}

	/**
	 * Adds a resource to the players inventory
	 * @param resource - the resource that will be added to the inventory
	 */
	public void AddResource(Resource resource) {
		inventory.add(resource);
	}

	/**
	 * An exlosion hits the player.
	 * The player dies here
	 */
	@Override
	public void Explode() {
		Game game = Game.getInstance();
		asteroid.Remove(this);
		game.PlayerDie(this);
	}

	/**
	 * A sunstorm hits the player
	 * The player dies
	 */
	@Override
	public void SunStorm() {
		Timer timer = new Timer();
		timer.RemoveSteppable(this);
		asteroid.Remove(this);
		Game.getInstance().PlayerDie(this);
	}
}
