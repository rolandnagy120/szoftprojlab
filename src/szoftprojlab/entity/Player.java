package szoftprojlab.entity;

//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Player.java
//  @ Date : 02/03/2021
//  @ Author : 
//
//


import szoftprojlab.Game;
import szoftprojlab.TeleportGate;
import szoftprojlab.resource.Resource;
import szoftprojlab.skeleton.ObjectHolder;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Player extends Entity {
	private List<TeleportGate> gates = new ArrayList<>();
	private List<Resource> inventory = new ArrayList<>();

	public Player() {
		System.out.println("Player - create");
		System.out.println("return from Player - create");
	}

	public List<Resource> GetInventory() {
		return inventory;
	}

	public void Step() {
	}

	public void Mine() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".Mine()");

		asteroid.Mine(this);

		System.out.println("return from "+objectName+".Mine()");
	}

	public void PlaceResource(Resource resource) {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".PlaceResource()");

		if (inventory.contains(resource))
			asteroid.Place(resource);

		System.out.println("return from "+objectName+".PlaceResource()");
	}

	public void PlaceGate() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".PlaceGate()");

		if (asteroid != null && gates.size() > 0) {
			asteroid.PlaceTeleportGate(gates.get(0));
			gates.remove(0);
		}
		System.out.println("return from "+objectName+".PlaceGate()");
	}

	public void MakeGates() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName + ".MakeGates()");

		System.out.print("Does the player have enough resources to create the gates? (Y|N) ");
		Scanner scanner = new Scanner(System.in);
		String input = scanner.next();

		if (input.equalsIgnoreCase("Y")) {
			TeleportGate teleportGate1 = new TeleportGate(1);
			TeleportGate teleportGate2 = new TeleportGate(2);
			oh.add(teleportGate1, "teleportGate1");
			oh.add(teleportGate2, "teleportGate2");
			teleportGate1.SetPair(teleportGate2);
			gates.add(teleportGate1);
			gates.add(teleportGate2);
		}

		System.out.println("return from " + objectName + ".MakeGates()");
	}

	public void MakeAndPlaceRobot() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".MakeAndPlaceRobot()");

		System.out.print("Does the player have enough resources to create the robot? (Y|N) ");
		Scanner scanner = new Scanner(System.in);
		String input = scanner.next();

		if (input.equalsIgnoreCase("Y")) {
			Robot robot = new Robot();
			oh.add(robot, "robot");
			asteroid.Accept(robot);
		}
		System.out.println("return from "+objectName+".MakeAndPlaceRobot()");
	}

	public List<TeleportGate> GetTeleportGates() {
		return gates;
	}

	public void AddResource(Resource resource) {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".AddResource()");
		inventory.add(resource);
		System.out.println("return from "+objectName+".AddResource()");
	}

	@Override
	public void Explode() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		System.out.println(objectName+".Explode()");
		Game game = Game.getInstance();
		oh.add(game, "game");
		game.PlayerDie(this);
		System.out.println("return from "+objectName+".Explode()");
	}

	@Override
	public void SunStorm() {
		ObjectHolder oh = ObjectHolder.getInstance();
		String objectName = oh.get(this);
		Game game = Game.getInstance();
		oh.add(game, "game");
		game.PlayerDie(this);
		System.out.println(objectName+".SunStorm()");
		System.out.println(objectName+" is destroyed");
		System.out.println("return from "+objectName+".SunStorm()");
	}
}
