package szoftprojlab;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Timer.java
//  @ Date : 10/03/2021
//  @ Author : 
//
//


import java.util.ArrayList;
import java.util.List;

public class Timer {
    private static Timer singleClassIntance = null;
    private final List<Steppable> steppables = new ArrayList<>();
    private int continueFrom = 0;
    private boolean gameStopped = false;

    /**
     * Ticks the timer
     * Calls the Step() function for every steppable
     * object
     */
    public void Tick() {
        for (; continueFrom < steppables.size(); continueFrom++) {
            if (gameStopped)
                break;
            steppables.get(continueFrom).Step();
        }
        continueFrom = 0;
    }

    /**
     * Clears all the steppables
     * Only for the skeleton
     */
    public void ClearSteppables() {
        steppables.clear();
        continueFrom = 0;
    }

    /**
     * Adds a steppable
     *
     * @param s - the object that will be added
     */
    public void AddSteppable(Steppable s) {
        if (!steppables.contains(s))
            steppables.add(s);
    }

    public static Timer getInstance() {
        if (singleClassIntance == null)
            singleClassIntance = new Timer();

        return singleClassIntance;
    }

    /**
     * Continues the step from the given index
     * @param i index where the timer will continue
     */
    public void ContinueFromIndex(int i) {
        continueFrom = i;
    }

    /**
     * Gets the index of the next step
     * @return  the index of the next step
     */
    public int GetStepIndex() {
        return continueFrom;
    }

    /**
     * Removes the given steppable from the timer
     * @param steppable the removable steppable
     */
    public void RemoveSteppable(Steppable steppable) {
        if(steppables.indexOf(steppable) < continueFrom)
            continueFrom--;
        steppables.remove(steppable);
    }

    /**
     * Stops the timer
     */
    public static void Stop() {
        Timer timer = Timer.getInstance();
        timer.gameStopped = true;
    }

    /**
     * Starts the timer
     */
    public static void Start() {
        Timer timer = Timer.getInstance();
        timer.gameStopped = false;
    }
}
