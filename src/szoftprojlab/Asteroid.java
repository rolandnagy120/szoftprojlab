package szoftprojlab;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Asteroid.java
//  @ Date : 02/03/2021
//  @ Author : 
//
//


import szoftprojlab.entity.Entity;
import szoftprojlab.resource.Resource;
import szoftprojlab.resource.ResourceNames;
import szoftprojlab.resource.ResourceStorage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class Asteroid implements Steppable, ResourceStorage {
	private int idx;
	private int layers;
	private boolean isEmpty = true;
	private boolean nearSun = false;
	private Resource resource;
	private List<Asteroid> neighbors = new ArrayList<>();
	private List<Entity> entities = new ArrayList<>();
	private List<TeleportGate> gates = new ArrayList<>();

	public Asteroid(int ID, int numberOfLayers) {
		idx = ID;
		numberOfLayers = layers;
	}

	public List<Entity> GetEntities() {
		return entities;
	}

	public void AddNeighbor(Asteroid newNeighbor) {

	}

	public int GetLayerThickness() {
		return layers;
	}

	public void SunStorm() {
	}
	
	public void ChangeNearSun() {
		System.out.println("Asteroid.ChangeNearSun()");
		if (resource != null)
			resource.SeeSun(this);
		System.out.println("return from Asteroid.ChangeNearSun()");
	}
	
	public void Explode() {
	}
	
	public void Drill() {
		System.out.println("Asteroid.Drill()");

		try {
			System.out.print("Did the drill strike through the asteroid and is the sun near? (YY|YN|NY|NN) ");
			char input = (char)System.in.read();

			if (Character.toUpperCase(input) == 'Y') {
				input = (char)System.in.read();

				if (Character.toUpperCase(input) == 'Y') {
					resource.SeeSun(this);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		System.out.println("return from Asteroid.Drill()");
	}
	
	public void Accept(Entity entity) {
		System.out.println("Asteroid.Accept()");
		if (!entities.contains(entity))
			entities.add(entity);
		entity.MoveTo(this);
		System.out.println("return from Asteroid.Accept()");
	}
	
	public void Remove(Entity entity) {
	}
	
	public void Mine(ResourceStorage rs) {
		System.out.println("Asteroid.Mine()");

		if (resource != null)
			resource.AddToOwner(rs);

		System.out.println("return from Asteroid.Mine()");
	}
	
	public void Place(Resource resource) {
	}
	
	public Asteroid GetNeighbor(int idx) {
		return null;
	}
	
	public TeleportGate GetTeleportGate(int idx) {
		return null;
	}

	public List<TeleportGate> GetTeleportGates() {
		return gates;
	}
	
	public void AddResource(ResourceNames name, Resource resource) {
		if (this.resource == null)
			this.resource = resource;
	}
	
	public void AddEntitysResourcesToComparator() {
	}
	
	public void DestroyResource() {
		System.out.println("Asteroid.DestroyResource()");
		System.out.println("return from Asteroid.DestroyResource()");
	}
	
	public void PlaceTeleportGate(TeleportGate gate) {
	}

	public void Step() {

	}
}
