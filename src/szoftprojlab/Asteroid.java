package szoftprojlab;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : Asteroid.java
//  @ Date : 02/03/2021
//  @ Author : 
//
//


import szoftprojlab.entity.Entity;
import szoftprojlab.entity.Player;
import szoftprojlab.resource.Resource;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class Asteroid {
	private int idx;
	private int layers;
	private boolean isEmpty = true;
	private boolean nearSun = false;
	private Resource resource;
	private List<Asteroid> neighbors = new ArrayList<>();
	private List<Entity> entities = new ArrayList<>();
	private List<TeleportGate> gates = new ArrayList<>();

	public Asteroid(int ID, int numberOfLayers) {
		idx = ID;
		layers = numberOfLayers;
		nearSun = false;
	}

	public List<Entity> GetEntities() {
		return entities;
	}

	public void AddNeighbor(Asteroid newNeighbor) {
		neighbors.add(newNeighbor);
		if (!newNeighbor.neighbors.contains(this))
			newNeighbor.AddNeighbor(this);
	}

	public int GetLayerThickness() {
		return layers;
	}

	public void SunStorm() {
		if (layers > 0 || resource != null) {
			List<Entity> entitiesCopy = new ArrayList<>(entities);
			entitiesCopy.forEach(Entity::SunStorm);
		}
	}
	
	public void ChangeNearSun() {
		this.nearSun = !this.nearSun;
		SeeSunIfNeeded();
	}

	private void SeeSunIfNeeded() {
		if (resource != null && layers == 0 && nearSun)
			resource.SeeSun(this);
	}

	public void Explode() {
		List<Entity> entitiesCopy = new ArrayList<Entity>(entities);
		entitiesCopy.forEach(Entity::Explode);
	}
	
	public void Drill() {
		if (layers > 0)
			layers--;

		SeeSunIfNeeded();
	}
	
	public void Accept(Entity entity) {
		if (!entities.contains(entity))
			entities.add(entity);
		entity.SetAsteroid(this);
	}

	private void CheckForVictory() {
		List<Resource> inventorySum = new ArrayList<>();
		entities.forEach(entity -> {
			inventorySum.addAll(entity.GetInventory());
		});

		Game.getInstance().CheckForVictory(inventorySum);
	}

	public void Remove(Entity entity) {
		entities.remove(entity);
	}
	
	public void Mine(Player player) {
		if (resource != null)
			player.AddResource(resource);
	}
	
	public void Place(Resource resource) {
		this.resource = resource;
	}
	
	public Asteroid GetNeighbor(int idx) {
		for (Asteroid neighbor : neighbors) {
			if (neighbor.idx == idx) {
				return neighbor;
			}
		}
		return null;
	}
	
	public TeleportGate GetTeleportGate(int idx) {
		for (TeleportGate gate : gates) {
			if (gate.GetId() == idx) {
				return gate;
			}
		}
		return null;
	}

	public List<TeleportGate> GetTeleportGates() {
		return gates;
	}
	
	public void AddResource(Resource resource) {
		if (this.resource == null)
			this.resource = resource;
	}

	public void DestroyResource() {
		resource = null;
	}
	
	public void PlaceTeleportGate(TeleportGate gate) {
		if (!gates.contains(gate)) {
			gates.add(gate);
			gate.Place(this);
		}
	}

	public Asteroid GetRandomNeighbor() {
		if (neighbors.size() == 0)
			return null;

		Random rnd = new Random();
		int randomIndex = rnd.ints(0, neighbors.size())
				.findFirst()
				.getAsInt();

		return neighbors.get(randomIndex);
	}
}
